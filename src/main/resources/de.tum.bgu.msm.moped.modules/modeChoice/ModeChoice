///////////////////////////////////////////////// HBWHBE Mode Choice /////////////////////////////////////////////////////

// Beta coefficients for walk modes in order of: intercept,
coefficients            = [0.0, 0.64, 2.98, 2.95, 2.87, 3.03, 5.84];

var calculateHBWHBEProbabilities = function(hh, person, trip){

    travelDistance = trip.getTripDistance();
    income = hh.getIncome();
    age = person.getAge();
    gender = person.getGender();
    driversLicense = person.hasDriversLicense();
    transitPass = person.hasTransitPass();
    disable = person.isDisable();
    activityDensity = hh.getHomeZone().getActivityDensity();
    intersectionDensity = hh.getHomeZone().getIntersectionDensity();

    utilityWalk         = interceptHBW[6] + ageHBW[6]*age + maleHBW[6]*(gender.name().equals("MALE")) +
                          driversLicenseHBW[6]*driversLicense + hhSizeHBW[6]*hhSize + hhAutosHBW[6]*hhAutos +
                          distToRailStopHBW[6]*distToRailStop + coreCityHBW[6]*(areaType.name().equals("CORE_CITY")) +
                          mediumSizedCityHBW[6]*(areaType.name().equals("MEDIUM_SIZED_CITY")) +
                          townHBW[6]*(areaType.name().equals("TOWN")) +
                          ruralHBW[6]*(areaType.name().equals("RURAL")) +
                          tripLengthHBW[6]*travelDistanceNMT;

    probabilityWalk = Math.exp(utilityWalk) / (Math.exp(utilityWalk) + 1);

    return probabilityWalk;

}

///////////////////////////////////////////////// OTHER Mode Choice /////////////////////////////////////////////////////

// Beta coefficients for walk modes in order of: intercept,
coefficients            = [0.0, 0.64, 2.98, 2.95, 2.87, 3.03, 5.84];

var calculateOTHERProbabilities = function(hh, person, trip){

    travelDistance = trip.getTripDistance();
    income = hh.getIncome();
    age = person.getAge();
    gender = person.getGender();
    driversLicense = person.hasDriversLicense();
    transitPass = person.hasTransitPass();
    disable = person.isDisable();
    activityDensity = hh.getHomeZone().getActivityDensity();
    intersectionDensity = hh.getHomeZone().getIntersectionDensity();

    utilityWalk         = interceptHBW[6] + ageHBW[6]*age + maleHBW[6]*(gender.name().equals("MALE")) +
                          driversLicenseHBW[6]*driversLicense + hhSizeHBW[6]*hhSize + hhAutosHBW[6]*hhAutos +
                          distToRailStopHBW[6]*distToRailStop + coreCityHBW[6]*(areaType.name().equals("CORE_CITY")) +
                          mediumSizedCityHBW[6]*(areaType.name().equals("MEDIUM_SIZED_CITY")) +
                          townHBW[6]*(areaType.name().equals("TOWN")) +
                          ruralHBW[6]*(areaType.name().equals("RURAL")) +
                          tripLengthHBW[6]*travelDistanceNMT;

    probabilityWalk = Math.exp(utilityWalk) / (Math.exp(utilityWalk) + 1);

    return probabilityWalk;

}

